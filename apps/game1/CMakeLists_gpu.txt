cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
project(example)

set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --compiler-bindir=\"/usr/bin/gcc-9\"  --libdevice-directory=\"/usr/lib/nvidia-cuda-toolkit/libdevice\" --dont-use-profile" )
set(CMAKE_CUDA_COMPILER "/usr/lib/nvidia-cuda-toolkit/bin/nvcc")

set(
        xtl_DIR
        /data/home/debraj1/xtl/build
        CACHE STRING "" FORCE
)
set(
        xtensor_DIR
        /data/home/debraj1/xtensor/build
        CACHE STRING "" FORCE
)
set(
        xsimd_DIR
        /data/home/debraj1/xsimd/build
        CACHE STRING "" FORCE
)

set(CMAKE_CUDA_COMPILER_FORCED "true")
set(CUDNN_INCLUDE_PATH "/data/home/debraj1/cudnn/cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive/include")
set(CUDNN_LIBRARY_PATH "/data/home/debraj1/cudnn/cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive/lib/libcudnn.so")

set (CMAKE_CXX_FLAGS "-g ${CMAKE_CXX_FLAGS}")

set(Torch_DIR "/data/home/debraj1/torch_cuda_10_2/libtorch/share/cmake/Torch")

find_package(PythonInterp REQUIRED)
find_package(CUDA REQUIRED)
enable_language(CUDA)
find_package(Torch REQUIRED)

set(CMAKE_OSX_ARCHITECTURES "x86_64")

find_package(xsimd REQUIRED PATHS /data/home/debraj1/xsimd/build)
find_package(xtensor REQUIRED PATHS /data/home/debraj1/xtensor/build)

add_definitions(-DXTENSOR_ENABLE_XSIMD)

include_directories("./")

add_executable(example example.cpp fixedobstacles.h fixedobstacles.cpp gameConstants.h enemy/enemy.h enemy/enemy.cpp gameSimulation.cpp gameSimulation.h findPath.cpp findPath.h player.cpp player.h state.h state.cpp rl_control.cpp rl_control.h observation.h coordinatesUtil.cpp coordinatesUtil.h
        plot/pbPlots.hpp plot/pbPlots.cpp plot/supportLib.hpp plot/supportLib.cpp objectLocator.cpp objectLocator.h observation.cpp AStar_.cpp AStar_.h AStarOpenList.cpp AStarOpenList.h node_.cpp node_.h TestResult.h DQN/DQN_interface.h DQN/ReplayMemory.cpp DQN/ReplayMemory.h
        #DQN/dueling-DQN/DQNNet.cpp DQN/dueling-DQN/DQNNet.h DQN/dueling-DQN/RLNN_Agent.cpp DQN/dueling-DQN/RLNN_Agent.h
        #DQN/DDQN/DQNNet.cpp DQN/DDQN/DQNNet.h DQN/DDQN/RLNN_Agent.cpp DQN/DDQN/RLNN_Agent.h
        DQN/Vanilla-DQN/DQNNet.cpp DQN/Vanilla-DQN/DQNNet.h DQN/Vanilla-DQN/RLNN_Agent.cpp DQN/Vanilla-DQN/RLNN_Agent.h
        #DQN/dueling-DQN-bounded/DQNNet.cpp DQN/dueling-DQN-bounded/DQNNet.h DQN/dueling-DQN-bounded/RLNN_Agent.cpp DQN/dueling-DQN-bounded/RLNN_Agent.h
        Logger.cpp Logger.h trainingMaps.cpp trainingMaps.h testing.h FOV_CNN/CNN_controller.cpp FOV_CNN/CNN_controller.h FOV_CNN/FOV_Filters.cpp FOV_CNN/FOV_Filters.h dist/json/json.h dist/json/json-forwards.h dist/jsoncpp.cpp JsonParser.cpp JsonParser.h)

target_include_directories(example PUBLIC ${xtensor_INCLUDE_DIRS})
target_link_libraries(example "${TORCH_LIBRARIES}" "${CUDA_LIBRARIES}" xtensor)

set_property(TARGET example PROPERTY CXX_STANDARD 14)
